<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Barrier" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="RendezvousDirector" class="ptolemy.domains.rendezvous.kernel.RendezvousDirector">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 40.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={4, 23, 1126, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[892, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{446.0, 214.5}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model illustrates a design pattern with rendezvous&#10;called a &quot;barrier synchronization.&quot; In this example, the&#10;two Ramps are sending increasing sequences of integers&#10;to the Displays. However, the transfer is constrained to&#10;occur only when both the Barrier actor and the Sleep&#10;actor read inputs. Thus, a multi-way rendezvous between&#10;the two Ramp actors, the two Display actors, the Barrier&#10;actor, and the Sleep actor constrains the two transfers&#10;to the Display actors to occur simultaneously.  The&#10;Sleep actor will sleep a random amount of time after&#10;reading its input, and during that time will not accept&#10;additional inputs. Thus, after the first two (why two?)&#10;transfers to the Display actors the time between&#10;transfers is controlled by the Sleep actor.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 85.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="italic" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Random wait time.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[590.0, 370.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="italic" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Relation results&#10;in multi-way&#10;rendezvous.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[540.0, 55.0]">
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.2,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Illustration of Barrier Synchronization using Rendezvous">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 25.0]">
        </property>
    </property>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[470.0, 110.0]">
        </property>
    </entity>
    <entity name="Sleep" class="ptolemy.actor.lib.Sleep">
        <property name="sleepTime" class="ptolemy.actor.parameters.PortParameter" value="1602L">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="sleepTime">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[600.0, 310.0]">
        </property>
    </entity>
    <entity name="Uniform" class="ptolemy.actor.lib.Uniform">
        <property name="lowerBound" class="ptolemy.actor.parameters.PortParameter" value="0.0">
        </property>
        <property name="upperBound" class="ptolemy.actor.parameters.PortParameter" value="2000.0">
        </property>
        <property name="UniformIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={104, 125, 815, 518}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
            </property>
        </property>
        <doc>Create a sequence of uniformly distributed random numbers</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 365.0]">
        </property>
    </entity>
    <entity name="Round" class="ptolemy.actor.lib.conversions.Round">
        <property name="function" class="ptolemy.kernel.util.StringAttribute" value="round">
            <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                <property name="ceil" class="ptolemy.kernel.util.StringAttribute" value="ceil">
                </property>
                <property name="floor" class="ptolemy.kernel.util.StringAttribute" value="floor">
                </property>
                <property name="round" class="ptolemy.kernel.util.StringAttribute" value="round">
                </property>
                <property name="truncate" class="ptolemy.kernel.util.StringAttribute" value="truncate">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[555.0, 365.0]">
        </property>
    </entity>
    <entity name="Barrier" class="ptolemy.domains.rendezvous.lib.Barrier">
        <property name="BarrierIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={104, 125, 815, 518}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[655.0, 260.0]">
        </property>
    </entity>
    <entity name="Ramp2" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[470.0, 180.0]">
        </property>
    </entity>
    <entity name="Discard" class="ptolemy.actor.lib.Discard">
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{660, 340}">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="multiport"/>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="NORTH">
            </property>
        </port>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{0, 1, 2, 3, 4, 5, 6}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{596.0, -4.5}">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[800.0, 75.0]">
        </property>
    </entity>
    <entity name="Test2" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{0, 1, 2, 3, 4, 5, 6}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[600.0, 130.0]">
        </property>
    </entity>
    <entity name="And" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Emit a true if all of the inputs have received a true.&#10; *  If the timeout is non-zero, then emit a true after the timeout.&#10; *&#10; *  This accessor is typically used to stop a model after all&#10; *  of the TrainableTest accessors have emitted a true.&#10; *&#10; *  @input input1 The first input&#10; *  @input input2 the second input&#10; *  @output output True if the inputs have seen true or if the&#10; *  timeout has occurred&#10; *  @param timeout If non-zero, the timeout in milliseconds.&#10; *  @author Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;// After inputs appear on both inputs, generate a true output.&#10;var sawInput1 = false;&#10;var sawInput2 = false;&#10;&#10;exports.setup = function() {&#10;    this.input('input1');   &#10;    this.input('input2'); &#10;    this.output('output', {&#10;    	'type': 'boolean'&#10;    });&#10;    this.parameter('timeout');&#10;    &#10;    var self = this;&#10;    self.addInputHandler('input1', function() {&#10;    	self.sawInput1 = this.get('input1');&#10;    	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true) {&#10;    	    self.send('output', true);&#10;    	}&#10;    });&#10;    self.addInputHandler('input2', function() {&#10;	self.sawInput2 = this.get('input2');&#10; 	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true) {&#10;    	    self.send('output', true);&#10;    	}&#10;    });&#10;}&#10;&#10;exports.initialize = function() {&#10;    var self = this;&#10;&#10;    if (this.getParameter('timeout') &gt; 0) {&#10;        setTimeout(function () {&#10;	    console.log('JavaScriptBarrier: sending true after timeout.');&#10;	    self.send('output', true);&#10;        }, this.getParameter('timeout'));&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[705.0, 75.0]">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter">
        </property>
        <port name="input1" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="input2" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[540.0, 110.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[590.0, 180.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[540.0, 260.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Ramp.output" relation="relation2"/>
    <link port="Sleep.input" relation="relation6"/>
    <link port="Sleep.output" relation="relation4"/>
    <link port="Sleep.sleepTime" relation="relation"/>
    <link port="Uniform.output" relation="relation3"/>
    <link port="Round.input" relation="relation3"/>
    <link port="Round.output" relation="relation"/>
    <link port="Barrier.input" relation="relation5"/>
    <link port="Barrier.input" relation="relation6"/>
    <link port="Ramp2.output" relation="relation5"/>
    <link port="Discard.input" relation="relation4"/>
    <link port="Test.input" relation="relation2"/>
    <link port="Test.output" relation="relation7"/>
    <link port="Stop.input" relation="relation9"/>
    <link port="Test2.input" relation="relation5"/>
    <link port="Test2.output" relation="relation8"/>
    <link port="And.input1" relation="relation7"/>
    <link port="And.input2" relation="relation8"/>
    <link port="And.output" relation="relation9"/>
    <link relation1="relation2" relation2="relation6"/>
</entity>
