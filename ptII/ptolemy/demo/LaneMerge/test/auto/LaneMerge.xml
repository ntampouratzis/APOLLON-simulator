<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="LaneMerge" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="1000.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55.0, 15.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={9, 32, 1140, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[906, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.652892323767317">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{273.0400390624999, 142.06166294642858}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="At 120 km/hr, if cars&#10;appear every 3 seconds,&#10;they will be 100m apart.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120.0, -15.0}">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="3.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{170.0, 85.0}">
        </property>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="61.4">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{35.0, 120.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={654, 548, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{520.0, 190.0}">
        </property>
    </entity>
    <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{165.0, 190.0}">
        </property>
    </entity>
    <entity name="SingleEvent2" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="61.4">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{35.0, 190.0}">
        </property>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{0.099, 3.099}">
        </property>
        <property name="tolerance" class="ptolemy.data.expr.Parameter" value="1.0E-3">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[495.0, 250.0]">
        </property>
    </entity>
    <entity name="FreewayRamp" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Model of a freeway entrance ramp that delays merge requests until&#10; *  it is safe to merge and also provides a roadside service&#10; *  that suggests a ramp speed that will result in smooth joining on the&#10; *  freeway. This model accepts input events at the freewayCar port that&#10; *  represent cars on the freeway approaching the ramp entrance. It also&#10; *  accepts input events at the rampCar port, and in response to those&#10; *  events, provides a suggestedRampSpeed output. These events represent&#10; *  cars approaching the entrance on the ramp. Finally, it accepts&#10; *  events at the merge port, representing cars on the ramp that have&#10; *  arrived at the ramp entrance. In response to these events, it waits&#10; *  until the car can safely enter the freeway, and at that time,&#10; *  produces on the **merged** output the same data received on the **merge**&#10; *  input and produces a mergeTime output indicating the total amount of time&#10; *  that the car had to wait between arriving at the entrance and entering the&#10; *  freeway.&#10; *  &#10; *  This model makes a number of unrealistic simplications. First, the&#10; *  speed of cars on the freeway is fixed and independent of congestion.&#10; *  Second, It assumes that cars on the ramp accelerate instantaneously&#10; *  to the suggested speed and, once reaching the ramp entrace, can&#10; *  accelerate instantaneously to freeway speed.&#10; *  &#10; *  For much better freeway traffic models, see &lt;i&gt;Freeway Traffic Modeling&#10; *  and Control&lt;/i&gt;, by Antonella Ferrara, Simona Sacone, and Silvia Siri,&#10; *  Springer, 2018.&#10; *  &#10; *  @accessor FreewayRamp&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @parameter {number} sensorDistanceToMerge The distance in kilometers&#10; *   between a car sensor on the freeway and the ramp entrance. This is&#10; *   a number that defaults to 2.0.&#10; *  @parameter {number} freewaySpeed The speed of cars on the freeway in&#10; *   kilometers per hour.&#10; *  @parameter {number} rampLength The distance between the sensor that&#10; *   sees cars at the rampCar position and the freeway entrance (in&#10; *   kilometers). This is a number that defaults to 0.5&#10; *  @parameter {number} maxRampSpeed The maximum speed on the ramp in&#10; *   kilometers per hour. This is a number that defaults to 60.&#10; *  @parameter {number} minSpacing The minimum spacing between cars&#10; *   for a car to safely enter the freeway in kilometers. This is a&#10; *   number that defaults to 0.05.&#10; *   &#10; *  @input freewayCar An event indicating that a car on the freeway &#10; *   is approaching the ramp entrace. At the time of this event, the car&#10; *   is distance sensorDistanceToMerge prior to the merge.&#10; *  @input rampCar An event indicating that a car on the ramp &#10; *   is approaching the ramp entrace. At the time of this event, the car&#10; *   is distance rampLength prior to the merge.&#10; *  @input merge An event indicating that a car on the ramp &#10; *   has arrived at the ramp entrace. At the time of this event, the car&#10; *   is exactly at the merge.&#10; *  &#10; *  @output {number} output The output for the doubled value.&#10; *  @output {number}&#10; */&#10;exports.setup = function() {&#10;	this.parameter('sensorDistanceToMerge', {'type':'number', 'value':2.0});&#10;	this.parameter('freewaySpeed', {'type':'number', 'value':120.0});&#10;	this.parameter('rampLength', {'type':'number', 'value':0.5});&#10;	this.parameter('maxRampSpeed', {'type':'number', 'value':60.0});&#10;	this.parameter('minSpacing', {'type':'number', 'value':0.05});&#10;	&#10;	this.input('freewayCar');&#10;	this.input('rampCar');&#10;	this.input('merge');&#10;	&#10;	this.output('suggestedRampSpeed', {'type':'number'});&#10;	this.output('mergeTime', {'type':'number'});&#10;	this.output('merged');&#10;}&#10;&#10;exports.initialize = function() {&#10;	var thiz = this;&#10;	var blocked = [];&#10;	&#10;	this.addInputHandler('freewayCar', function() {&#10;		var distance = thiz.getParameter('sensorDistanceToMerge');&#10;		var speed = thiz.getParameter('freewaySpeed');&#10;		var minSpacing = thiz.getParameter('minSpacing');&#10;		&#10;		var time = currentTime();&#10;		&#10;		var tmin = time + 3600 * (distance - minSpacing)/speed;&#10;		var tmax = time + 3600 * (distance + minSpacing)/speed;&#10;		blocked.push([tmin, tmax]);&#10;		&#10;		// When car is no longer relevant, remove its blocked interval.&#10;		setTimeout(function() {&#10;			blocked.shift();&#10;		}, 1000 * tmax);&#10;	});&#10;	&#10;	this.addInputHandler('rampCar', function() {&#10;		var time = currentTime();&#10;		var minSpacing = thiz.getParameter('minSpacing');&#10;		var rampLength = thiz.getParameter('rampLength');&#10;		var maxRampSpeed = thiz.getParameter('maxRampSpeed');&#10;		&#10;		var suggestedRampSpeed = maxRampSpeed;&#10;		var arrivalTime = time + 3600 * rampLength / suggestedRampSpeed;&#10;		&#10;		for (var i = 0; i &lt; blocked.length; i++) {&#10;			if (blocked[i][0] &lt; arrivalTime &amp;&amp; blocked[i][1] &gt; arrivalTime) {&#10;				// Ramp will be blocked at current speed.&#10;				suggestedRampSpeed = 3600 * rampLength/(blocked[i][1] - time);&#10;			}&#10;		}&#10;		thiz.send('suggestedRampSpeed', suggestedRampSpeed);&#10;	});&#10;	&#10;	// Queue of cars waiting to enter the freeway. This queue&#10;	// contains the arrival time for each car.&#10;	var waiting = [];&#10;	var cars = [];&#10;	var lastMergeTime = -Infinity;&#10;	&#10;	// Function to enter the freeway. If the freeway is not currently&#10;	// blocked, this function allows a car to enter the freeway and&#10;	// produces a mergeTime output. Otherwise, it continues to wait.&#10;	// If a car is allowed to enter the freeway and there are one or&#10;	// more additional cars waiting, then it waits a safe amount of&#10;	// time before trying to enter again.&#10;	function enter() {&#10;		var arrivalTime = waiting[0];&#10;		var car = cars[0];&#10;		var time = currentTime();&#10;		&#10;		var minSpacing = thiz.getParameter('minSpacing');&#10;		var speed = thiz.getParameter('freewaySpeed');&#10;		var safeWaitingTime = 3600 * minSpacing / speed;&#10;		&#10;		// Check to see whether the most recent merge was too recent&#10;		// (within clock resolution of 1ms).&#10;		var wait = lastMergeTime + safeWaitingTime - time;&#10;		if (wait &gt;= 0.001) {&#10;		    // Last merge was too recent. Wait.&#10;		    setTimeout(enter, 1000 * wait);&#10;		    return;&#10;		}&#10;				&#10;		// Check to see whether the ramp is blocked.&#10;		var timeToWait = 0.0;&#10;		for (var i = 0; i &lt; blocked.length; i++) {&#10;			if (blocked[i][0] &lt; time &amp;&amp; blocked[i][1] &gt; time) {&#10;				// Ramp is blocked.&#10;				timeToWait = blocked[i][1] - time;&#10;			}&#10;		}&#10;		// Timing here has a resolution of ms, so if the timeToWait is&#10;		// small enough that setTimeout() won't result in any delay, then&#10;		// set it to zero.&#10;		if (timeToWait &lt; 0.001) {&#10;			timeToWait = 0.0;&#10;		}&#10;		// console.log('At time ' + time + ', wait for ' + timeToWait);&#10;		if (timeToWait &lt;= 0.0) {&#10;			thiz.send('mergeTime', time - arrivalTime);&#10;			thiz.send('merged', car);&#10;			lastMergeTime = time;&#10;			// Discard the car from the queue.&#10;			waiting.shift();&#10;			cars.shift();&#10;			if (waiting.length &gt; 0) {&#10;				// There are additional cars waiting.&#10;				// Try again after safe waiting time.&#10;				setTimeout(enter, 1000 * safeWaitingTime);&#10;			}&#10;		} else {&#10;			setTimeout(enter, 1000 * timeToWait);&#10;		}&#10;	}&#10;	&#10;	this.addInputHandler('merge', function() {&#10;		var time = currentTime();&#10;		var car = thiz.get('merge');&#10;		waiting.push(time);&#10;		cars.push(car);&#10;		if (waiting.length == 1) {&#10;			// This is the only car waiting, so trigger a wait.&#10;			// Otherwise, assume it will be triggered after the&#10;			// currently waiting car enters the freeway.&#10;			enter();&#10;		}&#10;	});&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="$PTII/ptolemy/demo/LaneMerge/FreewayRamp.js">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[345.0, 180.0]">
        </property>
        <port name="freewayCar" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="rampCar" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="merge" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="suggestedRampSpeed" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="mergeTime" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="merged" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;SingleEvent.output&quot;,x=35.0,y=120.0}, tail={id=&quot;Merge.input&quot;,x=165.0,y=190.0,index=2}, points={95.0,120.0,95.0,185.0} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Merge.input&quot;,x=165.0,y=190.0,index=2}, tail={id=&quot;SingleEvent2.output&quot;,x=35.0,y=190.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[435.0, 190.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation3"/>
    <link port="SingleEvent.output" relation="relation4"/>
    <link port="Display.input" relation="relation6"/>
    <link port="Merge.input" relation="relation4"/>
    <link port="Merge.input" relation="relation5"/>
    <link port="Merge.output" relation="relation"/>
    <link port="SingleEvent2.output" relation="relation5"/>
    <link port="Test.input" relation="relation6"/>
    <link port="FreewayRamp.freewayCar" relation="relation3"/>
    <link port="FreewayRamp.merge" relation="relation"/>
    <link port="FreewayRamp.mergeTime" relation="relation6"/>
</entity>
