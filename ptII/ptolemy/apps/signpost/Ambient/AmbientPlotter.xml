<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="AmbientPlotter" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{25.0, 45.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={21, 176, 1042, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[808, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8925375025394905">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{419.04003906249994, 305.1247234296678}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Simple test case that extracts the light level from the Ambient sensor on the signpost development&#10;system.  The app that needs to be running on the Ambient module in module 0 is sense_and_json&#10;in the signpost git repository.  The radio needs to be running is signpost_debug_radio_app&#10;from the debug_print branch of the git repo.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 225.0]">
        </property>
    </property>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={779, 177, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{260.0, 110.0}">
        </property>
    </entity>
    <entity name="SerialPort" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor sends and/or receives data from a serial port on the host.&#10; *  The accessor lists all the serial ports that it finds as options.&#10; *  Whenever an input is received on the `toSend` input,&#10; *  the data on that input is sent to the serial port.&#10; *  Whenever data is received from the serial port, the data is&#10; *  produced on the `received` output.&#10; *  When `wrapup()` is invoked, this accessor closes the serial port.&#10; *&#10; *  The send and receive types can be any of those supported by the host.&#10; *  The list of supported types will be provided as options for the `sendType`&#10; *  and `receiveType` parameters. For the Nashorn host, these include at&#10; *  least 'string', 'number', 'JSON', and a variety of numeric types.&#10; *  The type 'number' is equivalent to 'double'.&#10; *  &#10; *  The data chunks sent on the `received` output depend on the `receiveType`&#10; *  parameter. Each output will be of the specified type. Note that if&#10; *  `receivedType` is 'string' or 'JSON' then the output is produced only&#10; *  after a null byte is received on the serial port. If the type is 'JSON',&#10; *  then this accessor will attempt to parse the JSON. If parsing fails,&#10; *  then the raw byte array will be sent to the `invalid` output port.&#10; *  &#10; *  When type conversions are needed, e.g. when you send a double&#10; *  with `sendType` set to int, or an int with `sendType` set to byte,&#10; *  then a &quot;primitive narrowing conversion&quot; will be applied, as specified here:&#10; *  https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.3 .&#10; *&#10; *  For numeric types, you can also send an array with a single call&#10; *  to this.send(). The elements of the array will be sent in sequence.&#10; *&#10; *  Accessors that extend this one can override the `toSendInputHandler` function&#10; *  to customize what is sent.&#10; *&#10; *  This accessor requires the 'serial' module.&#10; *&#10; *  @accessor net/SerialPort&#10; *&#10; *  @input toSend The data to be sent over the serial port.&#10; *  @output received The data received from the serial port converted to the specified type.&#10; *  @output invalid Byte arrays that fail to parse in JSON.&#10; *&#10; *  @parameter {int} port The port on the host to connect to. This defaults to the&#10; *   last (most recently added, presumably) serial port in the list of serial ports on&#10; *   the host.&#10; *  @parameter {string} receiveType See above.&#10; *  @parameter {string} sendType See above.&#10; *&#10; *  @author Edward A. Lee, Beth Osyk, Chadlia Jerad, Victor Nouvellet&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*global addInputHandler, error, exports, get, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var serial = require('serial');&#10;var port = null;&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function () {&#10;    this.input('toSend');&#10;    this.output('received');&#10;    this.output('invalid');&#10;&#10;    this.parameter('baudRate', {&#10;        'type': 'int',&#10;        'value': 9600&#10;    });&#10;    this.parameter('port', {&#10;        'type': 'string'&#10;    });&#10;    this.parameter('receiveType', {&#10;        'type': 'string',&#10;        'value': 'string'&#10;    });&#10;    this.parameter('sendType', {&#10;        'type': 'string',&#10;        'value': 'string'&#10;    });&#10;    // Attempt to add a list of options for types and ports, but do not error out&#10;    // if the socket module is not supported by the host.&#10;    try {&#10;        var self = this;&#10;        serial.hostSerialPorts(function(serialPorts) {&#10;            if (serialPorts) {&#10;                self.parameter('port', {&#10;                    'options': serialPorts,&#10;                    'value': serialPorts[serialPorts.length - 1]&#10;                });&#10;            }&#10;        });&#10;        this.parameter('receiveType', {&#10;            'options': serial.supportedReceiveTypes()&#10;        });&#10;        this.parameter('sendType', {&#10;            'options': serial.supportedSendTypes()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Handle input on 'toSend' by sending the specified data over the radio. */&#10;exports.toSendInputHandler = function () {&#10;    port.send(this.get('toSend'));&#10;};&#10;&#10;/** Initiate a connection to the server using the current parameter values,&#10; *  set up handlers for for establishment of the connection, incoming data,&#10; *  errors, and closing from the server, and set up a handler for inputs&#10; *  on the toSend() input port.&#10; */&#10;exports.initialize = function () {&#10;    port = new serial.SerialPort(&#10;        this.get('port'),&#10;        this.accessorName, // FIXME: Using an undocumented feature.&#10;        2000,    // FIXME: Replace with timeout parameter.&#10;        {        // Options.&#10;            'baudRate': this.getParameter('baudRate'),&#10;            'receiveType': this.getParameter('receiveType'),&#10;            'sendType': this.getParameter('sendType')&#10;        });&#10;&#10;    var self = this;&#10;&#10;    port.on('data', function (data) {&#10;        if (self.getParameter('receiveType') === 'json') {&#10;            try {&#10;                data = JSON.parse(data);&#10;                self.send('received', data);&#10;            } catch(err) {&#10;                self.send('invalid', data);&#10;            }&#10;        } else {&#10;            self.send('received', data);&#10;        }&#10;    });&#10;&#10;    this.addInputHandler('toSend', exports.toSendInputHandler.bind(this));&#10;    &#10;    port.open();&#10;};&#10;&#10;/** Close the web socket connection. */&#10;exports.wrapup = function () {&#10;    if (port) {&#10;        port.close();&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/SerialPort.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="/dev/cu.usbserial-ANZ1R18W">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="string">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{40.0, 120.0}">
        </property>
        <property name="baudRate" class="ptolemy.data.expr.Parameter" value="115200">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="invalid" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={198, 530, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{170.0, 160.0}">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('in');&#10;	this.output('out', {type:'number'});&#10;}&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('in', function() {&#10;		var value = self.get('in');&#10;		self.send('out', value.l);&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{260.0, 170.0}">
        </property>
        <port name="in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="SequencePlotter" class="ptolemy.actor.lib.gui.SequencePlotter">
        <property name="fillOnWrapup" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={772, 413, 500, 344}, maximized=false}">
        </property>
        <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute" value="[500, 300]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{370.0, 170.0}">
        </property>
        <configure>
<?plotml <!DOCTYPE plot PUBLIC "-//UC Berkeley//DTD PlotML 1//EN"
"http://ptolemy.eecs.berkeley.edu/xml/dtd/PlotML_1.dtd">
<plot>
<title>Light Level (lux)</title>
<xLabel>sample</xLabel>
<yLabel>lux</yLabel>
<xRange min="0.0" max="100.0"/>
<yRange min="0.0" max="500.0"/>
</plot>?>
        </configure>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;SerialPort.invalid&quot;,x=40.0,y=120.0}, tail={id=&quot;Display2.input&quot;,x=170.0,y=160.0}, points={120.0,130.0,120.0,160.0} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{205.0, 110.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;JavaScript.in&quot;,x=260.0,y=170.0}, tail={id=&quot;relation3.vertex1&quot;,x=205.0,y=110.0}, points={205.0,170.0} },{ head={id=&quot;SerialPort.received&quot;,x=40.0,y=120.0}, tail={id=&quot;relation3.vertex1&quot;,x=205.0,y=110.0}, points={} },{ head={id=&quot;Display.input&quot;,x=260.0,y=110.0}, tail={id=&quot;relation3.vertex1&quot;,x=205.0,y=110.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;JavaScript.out&quot;,x=260.0,y=170.0}, tail={id=&quot;SequencePlotter.input&quot;,x=370.0,y=170.0}, points={} } }">
        </property>
    </relation>
    <link port="Display.input" relation="relation3"/>
    <link port="SerialPort.received" relation="relation3"/>
    <link port="SerialPort.invalid" relation="relation"/>
    <link port="Display2.input" relation="relation"/>
    <link port="JavaScript.in" relation="relation3"/>
    <link port="JavaScript.out" relation="relation2"/>
    <link port="SequencePlotter.input" relation="relation2"/>
</entity>
