<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
<!-- $Id$ -->
<!--
demosPtiny.htm is derived from this file by including
anything between the tags vergilDoc and /vergilDoc.
The vergilDoc tags are used by $PTII/doc/javahtml.awk
to generate demosPtiny.htm.
-->
<link href="../../../doc/default.css" rel="stylesheet" type="text/css">
  </head>

<body>
<!--ptinyKeplerDocs-->
<!--bcvtbDocs-->
<h1> Tour of Ptolemy II </h1>

<!--
Note:  demos should go with in the directory of their respective
domains. Demo xml files should usually be upper case, and have the
same name as the directory they reside in; so we should
have sdf/demo/Foo/Foo.xml.
The reason that the xml files are upcased is so that if
we do code generation, we get Foo.java instead of foo.java
-->

If you are viewing this from within Vergil, the graphical
editor for Ptolemy II, then
many of the following links will open models that highlight the
key features of Ptolemy II. If you are using an ordinary
web browser, then you will see the XML definition of the models.
To run the models in Vergil,
click on the red triangle in the toolbar. The
diagrams are fully editable, so feel free to explore.
You can also access the <a href="completeDemosPtinyKepler.htm">complete list of demos</a>
<!-- whatNew.htm links to whatsNew4.0.htm, which has many of features
 not present in ptiny -->
<!--vergilDocs-->
. Contents:
<ul>
<li> <a href="#domain">Domain-Specific Modeling</a>: Domain-specific modeling and design.
</li>

<li> <a href="#basic">Concurrent Models of Computation</a>: A rich suite of semantic models for actors.
</li>

<li> <a href="#heterogeneous">Heterogeneous Modeling</a>: Mixing models of computation.
</li>

<li> <a href="#infrastructure">Modeling Infrastructure</a>: Capabilities shared by all uses of Ptolemy II.
</li>

<li> <a href="#libraries">Actor Libraries</a>: Useful libraries of actors.
</li>

<li> <a href="#experimental">Experimental</a>: Demonstrations of less mature capabilities.
</li>

</ul>



<h2>
<a name="domain">Domain-Specific Modeling</a>
</h2>
Ptolemy II can be used to build sophisticated application domain-specific modeling capabilities
and frameworks. These frameworks can be packaged as separate executable
applications (e.g. CyPhySim or VisualSense)
or accessed from within Ptolemy II. Here, we illustrate some such frameworks.
<ul>


<!--vergilDocs-->
<br>
</li><br>


<li><i>Accessors</i>:
<a href="../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageAnnotate/ImageAnnotate.xml">ImageAnnotate</a>
<br>
(See also
<a href="../../../org/terraswarm/accessor/demo/NaturalLanguage/NaturalLanguage.xml">NaturalLanguage</a>
<a href="../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Random.xml">Random</a>,
<a href="../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/WebSocketChat.xml">WebSocketChat</a>,
<a href="../../../ptolemy/actor/lib/jjs/modules/httpClient/demo/REST/Weather.xml">Weather.xml</a>,
<a href="../../../org/terraswarm/accessor/demo/Hue/Hue.xml">Hue</a>,
<a href="../../demo/Office/Office.xml">Office</a>
)
<br>
Accessors are JavaScript actors that provide access to devices and/or network services.
CapeCode is a subset of Ptolemy II for building applications using accessors. These models
illustrate accessing the system camera,
creating web servers, creating Internet services, and accessing those Internet
services.
Many more demos can be found in the <a href="whatsNew11.0.htm#scripting">what's new documentation</a>.
</li><br>


<li><i>Signal Processing</i>:
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>
<br>
(See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>,
<a href="../../domains/sdf/demo/LMSAdaptive/LMSAdaptive.xml">LMSAdaptive</a>,
<a href="../../domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.xml">SynthesizedVoice</a>
)
<br>
Ptolemy II includes a library and models of computation suitable for
signal processing, communication systems design, and image and video processing.
These demos show spectral estimation, adaptive filters, and model-based sound synthesis.
They illustrate the use of synchronous dataflow (SDF) for signal processing.
</li><br>


<li><i>Aspects</i>: 
<a href="../../demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithProcessor.xml">GeneratorRegulatorProtectorWithProcessor</a>,
<br>
(See also
<a href="../../actor/lib/aspect/demo/CompositeQM/CompositeQM.xml">CompositeQM</a>,
<a href="../../actor/lib/aspect/demo/CarTrackingAttackModeling/CarTrackingAttackModeling.xml">CarTrackingAttackModeling</a>,
<a href="../../demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithDecorator.xml">GeneratorRegulatorProtectorWithDecorator</a>,
<a href="../../demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithSpecificationAsAspect.xml">GeneratorRegulatorProtectorWithSpecificationAsAspect</a>
)
<br>
Ptolemy II includes an innovative way to model execution times and communication delays, failures, and attacks using 
a principle called aspect-oriented modeling. A model is constructed with ideal behavior (assuming zero execution times and perfect channels),
and then an aspect is woven with the model to specify execution times and impairments imposed by the channel.
The aspects can also be used to simply monitor executions or communications for conformance against some specification.
</li><br>


<li><i>Estimation and Learning</i>:
<a href="../../../org/ptolemy/machineLearning/particleFilter/demo/ParticleFilterRange/ParticleFilterRange.xml">ParticleFilterRange</a>
<br>
(See also
<a href="../../../org/ptolemy/machineLearning/particleFilter/demo/OpenLoopTwoRobotTargetLocalization/OpenLoopTwoRobotTargetLocalization.xml">OpenLoopTwoRobotTargetLocalization</a>,
<a href="../../../org/ptolemy/machineLearning/particleFilter/demo/OpenLoopTwoRobotTargetLocalization/JointParticleFilter.xml">JointParticleFilter</a>,
<a href="../../../ptolemy/demo/RobotMPC/RobotMPC.xml">RobotMPC</a>
)
<br>
These demos use particle filters to construct estimates of the location of a target given imperfect sensor data.
They then perform optimization to physically move the sensors to improve the location estimate.
</li><br>


<li><i>Optimization</i>:
<a href="../../../org/ptolemy/machineLearning/particleFilter/demo/OnlineTrajectoryOptimization/OnlineTrajectoryOptimization.xml">Online Robot Trajectory Optimization</a>
<br>
(See also
<a href="../../../org/ptolemy/optimization/demo/LinearRegression/LinearRegression.xml">LinearRegression</a>
)
<br>
These demos show how to specify a function to be optimized to generate control signals.
</li><br>


<li><i>Statistical Models</i>:
<a href="../../demo/ProbabilisticModels/HiddenMarkovModelAnalysis.xml">HiddenMarkovModelAnalysis</a>
<br>
(See also
<a href="../../../org/ptolemy/machineLearning/clustering/demo/KMeans/KMeans.xml">KMeans</a>
)
<br>
These demos illustrate various ways to construct probabilistic models, with an emphasis on hidden-Markov models and K-means clustering.
</li><br>


<li><i>Image Processing</i>:
<a href="../../actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Random.xml">Random</a>
<br>
(See also
<a href="../../../ptolemy/actor/lib/jjs/modules/aprilTags/demo/AprilTags/AprilTags.xml">AprilTags</a>,
<a href="../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/ImageFilters.xml">ImageFilters</a>
)
<br>
These demos illustrate the ability to capture images from your camera and manipulate them.
</li><br>


<li><i>Audio</i>:
<a href="../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/Audio.xml">Audio</a>
<br>
(See also
<a href="../../actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml">KarplusStrong</a>,
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>
)
<br>
Using the accessors of CapeCode, Ptolemy II provides capabilities for capturing, playing, and
manipulating audio data.
</li><br>


<li><i>Wireless networks</i>:
<a href="../../domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.xml">WirelessSoundDetection</a>
<!--ptinyKeplerDocs-->
<!--/bcvtbDocs-->
<!-- Router uses DEDirector, which is not in bcvtb -->
<a href="../../data/type/demo/Router/Router.xml">Router</a>,
<a href="../../domains/de/demo/TimingParadox/TimingParadox.xml">TimingParadox</a>,
<a href="../../domains/de/demo/OpenQueueingNetwork/OpenQueueingNetwork.xml">OpenQueueingNetwork</a>
).
<br>
This example shows
a famous paradox in probability called the inspection paradox.
It illustrates use of the <i>discrete-event</i> (DE) domain, where
events occur on a time line and are processed chronologically.
In this example, random
data stimulates a model and statistics are collected and reported
in various ways.
For multithreaded DE, see
<a href="../../actor/lib/hoc/demo/ThreadedComposite/ConcurrentChat.xml">ConcurrentChat</a>,
<a href="../../actor/lib/hoc/demo/ThreadedComposite/BackgroundExecution.xml">BackgroundExecution</a>, and
<a href="../../actor/lib/hoc/demo/ThreadedComposite/ParallelExecution.xml">Parallel Execution</a>.
<br>
</li><br>


<li><i>Continuous-Time Modeling</i>:
<a href="../../domains/continuous/demo/Lorenz/Lorenz.xml">Lorenz</a>
<br>
(See also
<a href="../../domains/continuous/demo/DCMotor/DCMotor.xml">DCMotor</a>,
<a href="../../domains/continuous/demo/Lorenz/LorenzDifferentialSystem.xml">Lorenz with DifferentialSystem</a>,
<a href="../../domains/continuous/demo/SquareWave/SquareWave.xml">SquareWave</a>,
<a href="../../domains/continuous/demo/Sinusoid/Sinusoid.xml">Sinusoid</a>)
<br>
This example shows a continuous-time
nonlinear feedback system that exhibits
chaotic behavior (this system is called a Lorenz attractor).
It illustrates the <i>continuous</i> domain,
which uses an underlying solver for ordinary differential equations
and cleanly supports mixtures of discrete events and continuous-time
signals.
<br>
</li><br>


<li><i>Synchronous Dataflow</i>:
<a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">Spectrum</a>
<br>
(See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
<br>
This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates models the use of synchronous dataflow (SDF) for signal
processing, and also shows many basic capabilities like
hierarchical models,
the Expression actor, and the signal processing actor library.
In SDF, the firing of actors is statically scheduled, and at the start of execution,
boundedness and deadlock conditions are checked.
<br>
</li><br>


<li><i>Process Networks</i>:
<a href="../../domains/pn/demo/OrderedMerge/OrderedMerge.xml">OrderedMerge</a>
<br>
(See also
<a href="../../domains/pn/demo/NondeterministicMerge/NondeterministicMerge.xml">NondeterministicMerge</a>,
<a href="../../domains/pn/demo/QR/QR.xml">QR</a>).
<br>
The process networks (PN) domain follows the semantics given by Kahn and MacQueen in 1977
to get processes with their own threads of control that send messages to one another
and achieve deterministic computation.
The <a href="../../domains/pn/demo/OrderedMerge/OrderedMerge.xml">OrderedMerge</a> example implements an example given by Kahn and MacQueen
that calculates numbers whose prime
factors are 2, 3, and 5, only, and produces
them in an ordered sequence.
As of version 5.0, we have extended this model of computation with a
nondeterministic merge actor, illustrated in
<a href="../../domains/pn/demo/NondeterministicMerge/NondeterministicMerge.xml">NondeterministicMerge</a>.
<br>
<!--ptinyKeplerDocs-->
<!--vergilDocs-->
<br>
<!--ptinyKeplerDocs-->

<!--vergilDocs-->
</li><br>

<li> <a href="../../actor/lib/comm/demo/TrellisDecoder/TrellisDecoder.xml">TrellisDecoder</a>:
Communication library.

</li><br>

</ul>



<!--vergilDocs-->
  </body>
</html>
</body>
</html>
</body>
</html>
